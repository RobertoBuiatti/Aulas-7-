"""Algoritmos para otimiza√ß√£o de rotas com m√∫ltiplos geocodificadores."""
from geopy.geocoders import Nominatim, Photon
from geopy.distance import geodesic
import networkx as nx
from typing import List, Tuple, Dict
import time
import random
import os
import requests
import json

# Carrega os endere√ßos do arquivo JSON
def carregar_enderecos():
    """Carrega os endere√ßos do arquivo JSON."""
    try:
        caminho = os.path.join('Projeto Orientado (Ailton)', 'Endere√ßos.json')
        with open(caminho, 'r', encoding='utf-8') as f:
            dados = json.load(f)
            return dados['enderecos'], dados['ponto_inicial']
    except Exception as e:
        print(f"‚ùå Erro ao carregar endere√ßos: {str(e)}")
        return [], ""

# Carrega os endere√ßos e ponto inicial
ENDERECOS, PONTO_INICIAL = carregar_enderecos()

# Coordenadas aproximadas de Ituiutaba, MG
ITUIUTABA_LAT = -18.9706
ITUIUTABA_LON = -49.4640

# Coordenadas pr√©-definidas para locais conhecidos
COORDENADAS_CONHECIDAS = {
    "Rodovi√°ria, 100 - Ituiutaba, MG": (-18.9782, -49.4621)  # Coordenadas aproximadas da rodovi√°ria
}

# Configura√ß√µes de geocodifica√ß√£o
MAX_RETRIES = 3
RETRY_DELAY = 2  # segundos entre tentativas
NOMINATIM_TIMEOUT = 30

def salvar_cache_coordenadas(coordenadas, arquivo="coordenadas_cache.txt"):
    """Salva coordenadas geocodificadas em um arquivo de cache."""
    with open(arquivo, "w", encoding="utf-8") as f:
        for endereco, (lat, lon) in coordenadas.items():
            f.write(f"{endereco}|{lat}|{lon}\n")
    print(f"üíæ Cache de coordenadas salvo em {arquivo}")

def carregar_cache_coordenadas(arquivo="coordenadas_cache.txt"):
    """Carrega coordenadas geocodificadas de um arquivo de cache."""
    coordenadas = {}
    if os.path.exists(arquivo):
        with open(arquivo, "r", encoding="utf-8") as f:
            for linha in f:
                linha = linha.strip()
                if not linha:
                    continue
                partes = linha.split("|")
                if len(partes) == 3:
                    endereco, lat, lon = partes
                    coordenadas[endereco] = (float(lat), float(lon))
        print(f"üìÇ Cache de coordenadas carregado: {len(coordenadas)} endere√ßos")
    return coordenadas

def gerar_coordenada_sintetica(endereco):
    """Gera uma coordenada sint√©tica para um endere√ßo baseado em padr√µes de ruas."""
    # Extrai n√∫mero da rua/avenida e numera√ß√£o da casa
    partes = endereco.split(",")[0].split()
    try:
        # Extrai n√∫mero da rua (ex: Rua 12 -> 12)
        num_rua = int(''.join(filter(str.isdigit, partes[1])))
        
        # Extrai n√∫mero da casa
        num_casa = int(''.join(filter(str.isdigit, partes[2])))
        
        # Calcula deslocamentos mais precisos baseados na numera√ß√£o da rua e casa
        lat_offset = (num_rua / 100) * 0.001  # Deslocamento maior para ruas mais distantes
        lon_offset = (num_casa / 1000) * 0.001  # Deslocamento proporcional ao n√∫mero da casa
        
        # Ajusta dire√ß√£o do deslocamento baseado em padr√µes comuns de cidade
        if num_rua % 2 == 0:  # Ruas pares
            lat_offset = abs(lat_offset)
        else:  # Ruas √≠mpares
            lat_offset = -abs(lat_offset)
            
        if num_casa % 2 == 0:  # N√∫meros pares
            lon_offset = abs(lon_offset)
        else:  # N√∫meros √≠mpares
            lon_offset = -abs(lon_offset)
            
    except (IndexError, ValueError):
        # Fallback para caso n√£o consiga extrair os n√∫meros
        lat_offset = random.uniform(-0.005, 0.005)
        lon_offset = random.uniform(-0.005, 0.005)
    
    # Adiciona pequena varia√ß√£o aleat√≥ria para evitar pontos alinhados
    lat_offset += random.uniform(-0.0001, 0.0001)
    lon_offset += random.uniform(-0.0001, 0.0001)
    
    # Ajusta deslocamento baseado no tipo de via
    if "Avenida" in endereco:
        # Avenidas geralmente s√£o maiores e mais espa√ßadas
        return ITUIUTABA_LAT + (lat_offset * 1.5), ITUIUTABA_LON + (lon_offset * 1.5)
    else:
        # Ruas normais
        return ITUIUTABA_LAT + lat_offset, ITUIUTABA_LON + lon_offset

def geocodificar_com_photon(endereco):
    """Geocodifica um endere√ßo usando Photon API (baseado em OpenStreetMap)."""
    try:
        base_url = "https://photon.komoot.io/api/"
        params = {
            'q': endereco,
            'lang': 'pt',
            'limit': 1,
            # Limitar busca pr√≥ximo a Ituiutaba
            'lat': ITUIUTABA_LAT,
            'lon': ITUIUTABA_LON
        }
        
        response = requests.get(base_url, params=params)
        data = response.json()
        
        if response.status_code == 200 and data.get('features'):
            coordenadas = data['features'][0]['geometry']['coordinates']
            # Photon retorna [lon, lat], ent√£o inverte para [lat, lon]
            return coordenadas[1], coordenadas[0]
        else:
            print("‚ö†Ô∏è Photon API falhou")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no Photon: {str(e)}")
        return None

def tentar_geocodificar(endereco, max_tentativas=5):
    """Tenta geocodificar um endere√ßo com m√∫ltiplos servi√ßos."""
    def validar_coordenadas(lat, lon):
        """Valida se as coordenadas est√£o dentro de uma √°rea razo√°vel ao redor de Ituiutaba."""
        return -19.5 <= lat <= -18.5 and -50.0 <= lon <= -49.0

    def formatar_endereco(end):
        """Formata o endere√ßo para melhor precis√£o na busca."""
        end = end.replace(" - ", ", ")
        if "Ituiutaba" not in end:
            end += ", Ituiutaba, MG"
        if "Brasil" not in end:
            end += ", Brasil"
        return end

    # Verifica se o endere√ßo est√° nas coordenadas conhecidas
    if endereco in COORDENADAS_CONHECIDAS:
        coords = COORDENADAS_CONHECIDAS[endereco]
        if validar_coordenadas(coords[0], coords[1]):
            print(f"üìç Usando coordenada conhecida para: {endereco}")
            return coords
        print("‚ö†Ô∏è Coordenada conhecida inv√°lida, tentando geocodificar...")
    
    # Configura o geocodificador Nominatim
    nominatim = Nominatim(
        user_agent="otimizador_roberto_v3",
        timeout=NOMINATIM_TIMEOUT
    )

    # Configura o geocodificador Photon
    photon = Photon(
        user_agent="otimizador_roberto_v3",
        timeout=NOMINATIM_TIMEOUT
    )
    
    # Formata o endere√ßo para busca
    endereco_formatado = formatar_endereco(endereco)
    
    try:
        for tentativa in range(max_tentativas):
            print(f"üîç Tentativa {tentativa + 1} de {max_tentativas}...")
            
            # Ajusta o formato do endere√ßo baseado na tentativa
            if tentativa == 1:
                # Remove o n√∫mero da casa
                partes = endereco_formatado.split(",")
                endereco_busca = ",".join([" ".join(partes[0].split()[0:2])] + partes[1:])
            elif tentativa == 2:
                # Usa apenas rua/avenida e cidade
                endereco_busca = f"{endereco_formatado.split(',')[0]}, Ituiutaba, MG, Brasil"
            else:
                endereco_busca = endereco_formatado

            try:
                # Tenta com Nominatim
                location = nominatim.geocode(
                    endereco_busca,
                    exactly_one=True,
                    country_codes="BR",
                    language="pt-BR",
                    timeout=NOMINATIM_TIMEOUT,
                    bounded=True,
                    viewbox=((ITUIUTABA_LON - 0.1, ITUIUTABA_LAT - 0.1),
                            (ITUIUTABA_LON + 0.1, ITUIUTABA_LAT + 0.1))
                )
                
                if location and validar_coordenadas(location.latitude, location.longitude):
                    print(f"‚úÖ Nominatim encontrou resultado v√°lido!")
                    return location.latitude, location.longitude

                # Se Nominatim falhar, tenta com Photon
                print("üîÑ Tentando com Photon...")
                location = photon.geocode(
                    endereco_busca,
                    exactly_one=True,
                    language="pt"
                )
                
                if location and validar_coordenadas(location.latitude, location.longitude):
                    print("‚úÖ Photon encontrou resultado v√°lido!")
                    return location.latitude, location.longitude

                # Se geopy falhar, tenta API direta do Photon
                resultado = geocodificar_com_photon(endereco_busca)
                if resultado and validar_coordenadas(resultado[0], resultado[1]):
                    print("‚úÖ API Photon encontrou resultado v√°lido!")
                    return resultado

            except Exception as e:
                print(f"‚ö†Ô∏è Erro na tentativa {tentativa + 1}: {str(e)}")

            # Espera antes da pr√≥xima tentativa
            if tentativa < max_tentativas - 1:
                delay = RETRY_DELAY * (tentativa + 1)
                print(f"üò¥ Aguardando {delay} segundos antes da pr√≥xima tentativa...")
                time.sleep(delay)

    except Exception as e:
        print(f"‚ö†Ô∏è Erro cr√≠tico na geocodifica√ß√£o: {str(e)}")

    # Se todas as tentativas falharam, gera coordenada sint√©tica
    print(f"‚ö†Ô∏è Todos os geocodificadores falharam. Usando coordenada sint√©tica para: {endereco}")
    return gerar_coordenada_sintetica(endereco)

def geocodificar_enderecos():
    """Converte todos os endere√ßos para coordenadas usando m√∫ltiplos geocodificadores."""
    print("üåç Geocodificando endere√ßos...")
    
    # Tenta carregar cache primeiro
    coordenadas = carregar_cache_coordenadas()
    
    # Adiciona coordenadas conhecidas ao cache
    for endereco, coord in COORDENADAS_CONHECIDAS.items():
        if endereco not in coordenadas:
            coordenadas[endereco] = coord
            print(f"üìç Adicionado endere√ßo conhecido ao cache: {endereco}")
    
    # Verifica quais endere√ßos ainda precisam ser geocodificados
    todos_enderecos = [PONTO_INICIAL] + ENDERECOS
    enderecos_faltantes = [e for e in todos_enderecos if e not in coordenadas]
    
    if enderecos_faltantes:
        print(f"üîç Geocodificando {len(enderecos_faltantes)} endere√ßos faltantes...")
        
        falhas = []
        for i, endereco in enumerate(enderecos_faltantes, 1):
            print(f"\nüèÉ Processando endere√ßo {i}/{len(enderecos_faltantes)}: {endereco}")
            
            try:
                resultado = tentar_geocodificar(endereco)
                if resultado:
                    coordenadas[endereco] = resultado
                    print(f"‚úÖ Sucesso! Coordenadas: {resultado}")
                else:
                    print(f"‚ö†Ô∏è N√£o foi poss√≠vel geocodificar: {endereco}")
                    falhas.append(endereco)
            except Exception as e:
                print(f"‚ùå Erro ao geocodificar {endereco}: {str(e)}")
                falhas.append(endereco)
            
            # Salva o cache mais frequentemente para n√£o perder progresso
            if i % 3 == 0 or i == len(enderecos_faltantes):
                salvar_cache_coordenadas(coordenadas)
        
        # Relat√≥rio final
        if falhas:
            print(f"\n‚ö†Ô∏è {len(falhas)} endere√ßos n√£o puderam ser geocodificados:")
            for endereco in falhas:
                print(f"   - {endereco}")
        else:
            print("\n‚úÖ Todos os endere√ßos foram geocodificados com sucesso!")
            
    else:
        print("‚úÖ Todos os endere√ßos j√° est√£o no cache!")
            
    return coordenadas

def distancia_km(a: str, b: str, coordenadas: Dict) -> float:
    """Calcula a dist√¢ncia em km entre dois endere√ßos."""
    return geodesic(coordenadas[a], coordenadas[b]).km

def gerar_grafo(enderecos: List[str], coordenadas: Dict) -> nx.Graph:
    """Gera um grafo com as dist√¢ncias entre todos os pontos."""
    G = nx.Graph()
    for i, origem in enumerate(enderecos):
        for j, destino in enumerate(enderecos[i+1:], i+1):
            dist = distancia_km(origem, destino, coordenadas)
            G.add_edge(origem, destino, weight=dist)
    return G

def vizinho_mais_proximo(inicio: str, locais: List[str], coordenadas: Dict) -> Tuple[List[str], float]:
    """Algoritmo do vizinho mais pr√≥ximo."""
    print("\nüîÑ Calculando rota por Vizinho Mais Pr√≥ximo...")
    start_time = time.time()
    
    nao_visitados = locais[:]
    rota = [inicio]
    atual = inicio
    distancia_total = 0

    while nao_visitados:
        proximo = min(nao_visitados, key=lambda x: distancia_km(atual, x, coordenadas))
        distancia_total += distancia_km(atual, proximo, coordenadas)
        rota.append(proximo)
        nao_visitados.remove(proximo)
        atual = proximo

    print(f"‚è±Ô∏è Tempo de execu√ß√£o: {time.time() - start_time:.2f} segundos")
    return rota, distancia_total

def dijkstra(grafo: nx.Graph, inicio: str, locais: List[str]) -> Tuple[List[str], float]:
    """
    Algoritmo otimizado de Dijkstra para encontrar o caminho mais curto que conecta um conjunto de pontos.
    
    Args:
        grafo (nx.Graph): Grafo ponderado com os pontos e arestas.
        inicio (str): O ponto de partida.
        locais (List[str]): Lista de pontos que devem ser visitados.
    
    Returns:
        Tuple[List[str], float]: Uma tupla com a lista do caminho percorrido e a dist√¢ncia total.
    """
    print("\nüìç Calculando rota por Dijkstra...")
    start_time = time.time()

    # Inicializa√ß√£o
    caminho = [inicio]
    total = 0
    nao_visitados = set(locais)
    atual = inicio

    while nao_visitados:
        try:
            # Calcula as dist√¢ncias de 'atual' para todos os outros n√≥s usando Dijkstra
            distancias, _ = nx.single_source_dijkstra(grafo, atual, weight='weight')

            # Filtra os n√≥s n√£o visitados e verifica o mais pr√≥ximo
            menores_distancias = {no: distancias[no] for no in nao_visitados if no in distancias}

            if not menores_distancias:
                print("‚ö†Ô∏è N√£o foi poss√≠vel encontrar caminhos para todos os pontos.")
                break

            # Escolhe o pr√≥ximo n√≥ com a menor dist√¢ncia
            proximo = min(menores_distancias, key=menores_distancias.get)

            # Atualiza o caminho, a dist√¢ncia total e o n√≥ atual
            total += menores_distancias[proximo]
            caminho.append(proximo)
            nao_visitados.remove(proximo)
            atual = proximo

        except Exception as e:
            print(f"‚ö†Ô∏è Erro durante o c√°lculo do caminho: {str(e)}")
            break

    print(f"‚è±Ô∏è Tempo de execu√ß√£o: {time.time() - start_time:.2f} segundos")
    return caminho, total

def branch_and_bound(inicio: str, locais: List[str], coordenadas: Dict) -> Tuple[List[str], float]:
    """
    Algoritmo Branch and Bound para encontrar o caminho mais curto.
    
    Args:
        inicio (str): O ponto de partida.
        locais (List[str]): Lista de locais a serem visitados.
        coordenadas (Dict): Dicion√°rio com as coordenadas de cada local.
    
    Returns:
        Tuple[List[str], float]: Uma tupla com a lista do caminho e a dist√¢ncia total.
    """
    print("\nüå≥ Calculando rota por Branch and Bound...")
    start_time = time.time()

    todos_locais = set(locais)
    melhor_rota = None
    melhor_distancia = float('inf')

    def calcular_limite_inferior(rota_atual: List[str], nao_visitados: set) -> float:
        """Calcula um limite inferior para a dist√¢ncia total da rota."""
        if not nao_visitados:
            return 0
        
        # Soma a menor aresta saindo de cada n√≥ n√£o visitado
        soma = 0
        for local in nao_visitados:
            menor_dist = min(distancia_km(local, outro, coordenadas) 
                           for outro in nao_visitados.union({rota_atual[-1]}) 
                           if outro != local)
            soma += menor_dist
        return soma

    def branch_and_bound_rec(custo_atual: float, rota_atual: List[str], visitados: set):
        """Fun√ß√£o recursiva do Branch and Bound."""
        nonlocal melhor_rota, melhor_distancia
        
        # Verifica se todos os pontos foram visitados
        if len(visitados) == len(todos_locais):
            if custo_atual < melhor_distancia:
                melhor_distancia = custo_atual
                melhor_rota = rota_atual[:]
            return
        
        # Poda se o custo atual j√° √© maior que o melhor encontrado
        if custo_atual >= melhor_distancia:
            return
        
        # Calcula limite inferior
        limite = custo_atual + calcular_limite_inferior(rota_atual, todos_locais - visitados)
        if limite >= melhor_distancia:
            return
        
        # Explora os pr√≥ximos pontos poss√≠veis
        atual = rota_atual[-1]
        for proximo in todos_locais - visitados:
            dist = distancia_km(atual, proximo, coordenadas)
            branch_and_bound_rec(
                custo_atual + dist,
                rota_atual + [proximo],
                visitados | {proximo}
            )

    # Inicia a busca
    branch_and_bound_rec(0, [inicio], {inicio})
    
    if melhor_rota is None:
        print("‚ö†Ô∏è N√£o foi poss√≠vel encontrar uma rota v√°lida")
        return [], 0

    print(f"‚è±Ô∏è Tempo de execu√ß√£o: {time.time() - start_time:.2f} segundos")
    return melhor_rota, melhor_distancia

def main():
    """Fun√ß√£o principal que executa e compara os algoritmos."""
    try:
        print("üöÄ Iniciando otimiza√ß√£o de rotas...")
        
        def imprimir_rota(rota: List[str], titulo: str):
            """Imprime uma rota formatada."""
            print(f"\n=== {titulo} ===")
            for i, endereco in enumerate(rota):
                print(f"{i+1}. {endereco}")

        # Geocodifica todos os endere√ßos
        coordenadas = geocodificar_enderecos()
        
        if not coordenadas:
            print("‚ùå N√£o foi poss√≠vel obter as coordenadas dos endere√ßos")
            return
        
        # Remove o ponto inicial da lista de endere√ßos para evitar duplica√ß√£o
        locais = [e for e in ENDERECOS if e != PONTO_INICIAL]
        
        # Gera o grafo com as dist√¢ncias
        grafo = gerar_grafo([PONTO_INICIAL] + locais, coordenadas)
        
        # Executa os algoritmos
        rota_vmp, dist_vmp = vizinho_mais_proximo(PONTO_INICIAL, locais, coordenadas)
        rota_dij, dist_dij = dijkstra(grafo, PONTO_INICIAL, locais)
        rota_bb, dist_bb = branch_and_bound(PONTO_INICIAL, locais, coordenadas)
        
        # Imprime os resultados
        print("\nüéØ Resultados:")
        print(f"\nVizinho Mais Pr√≥ximo:")
        imprimir_rota(rota_vmp, "Rota")
        print(f"üìè Dist√¢ncia total: {dist_vmp:.2f} km")
        
        print(f"\nDijkstra:")
        imprimir_rota(rota_dij, "Rota")
        print(f"üìè Dist√¢ncia total: {dist_dij:.2f} km")
        
        print(f"\nBranch and Bound:")
        imprimir_rota(rota_bb, "Rota")
        print(f"üìè Dist√¢ncia total: {dist_bb:.2f} km")
        
        # Compara os resultados
        print("\nüìä Compara√ß√£o:")
        resultados = [
            ("Vizinho Mais Pr√≥ximo", dist_vmp),
            ("Dijkstra", dist_dij),
            ("Branch and Bound", dist_bb)
        ]
        melhor = min(resultados, key=lambda x: x[1])
        print(f"üèÜ Melhor algoritmo: {melhor[0]} com {melhor[1]:.2f} km")
        
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {str(e)}")

if __name__ == "__main__":
    main()
